<?xml version='1.0' encoding='UTF-8'?>
<slide xmlns="https://ulearn.me/schema/v2" title="Работа с базой данных" id="03b83f5d-8897-4e2e-adfc-a58b2043dc6f">
    <markdown>
        #### Добавление в приложение Spring Boot доступа к базе данных
        Как говорилось ранее, приложения часто по ряду причин предоставляют `API` без сохранения
        состояния. Хорошо, что очень немногие приложения таковы — то или иное состояние обычно 
        сохраняется для каких-то целей. Существуют как разные способы осуществить это, так и разные 
        способы совместного использования или маршрутизации этих данных, однако практически все 
        системы значительного размера используют одну или несколько баз данных.

        В этой теме мы рассмотрим, как в приложение Spring Boot, которое мы создали в предыдущей 
        теме, добавить доступ к базе данных.

        **!Не забудьте извлечь из репозитория код ветки `chapter4begin`.**

        #### Подготовка автоконфигурации для доступа к базе данных
        Напомним, Spring Boot упрощает сценарии использования. Когда паттерны определены, 
        запускается автоматическая инициализация нужных компонентов с разумными настройками по 
        умолчанию. Мы можем настроить функциональную возможность под себя, для этого нужно 
        указать одно/несколько значений свойств или написать адаптированную версию одного или 
        нескольких компонентов. Средство автоконфигурации обнаруживает изменения, отключается и 
        следует вашим указаниям. Рассмотрим это на примере доступа к базе данных.
            
        #### Чего мы надеемся добиться
        В прошлой теме мы использовали `ArrayList` для хранения и поддержания в актуальном состоянии
        списка видов кофе. Но у этого подхода есть недостатки.

        Первое, нет отказоустойчивости. Если в павшем приложении или на платформе, где оно работает
        произойдет сбой, то все внесенные в список за время его работы изменения будут утеряны.

        Второе, плохая масштабируемость. Второй и последующие запущенные экземпляры приложения
        будут работать с собственным отдельным списком видов кофе. Различные экземпляры не
        используют данные совместно, поэтому изменения, которые вы внесли в список видов кофе
        одним экземпляром (добавление новых видов кофе, удаление или обновление старых) не будут
        видны никому из работающих с другими экземплярами.

        Поэтому далее мы рассмотрим несколько вариантов решения этих проблем.
    </markdown>
</slide>