<?xml version='1.0' encoding='UTF-8'?>
<slide xmlns="https://ulearn.me/schema/v2" title="Наводим лоск" id="2854d599-aa31-4f24-8b22-0630e0b2aedf">
    <markdown>
        Обратим внимание на две вещи: извлечение начальной выборки данных в отдельный компонент
        и небольшое изменение порядка условий для большей ясности.

        Когда мы писали код, то заполнили в классе `RestApiDemoController` список видов кофе
        начальными значениями и до этого момента поддерживали эту структуру после преобразования в
        базу данных с доступом через репозиторий. Но лучшим вариантом будет — выделить эту
        функциональность в отдельный компонент, который можно быстро и легко отключать или
        включать.

        Существует много способов автоматического выполнения кода при запуске приложения, в том
        числе и использование `CommandLineRunner` и `ApplicationRunner` и задание лямбда-выражения в
        нашем случае для создания и сохранения демонстрационных данных. Но мы предлагаем
        использовать для этой цели класс `@Component` и метод `@PostConstruct` потому что:

        - При автоматическом связывании компонента репозитория с помощью методов генерации
        компонентов `CommandLineRunner` и `ApplicationRunner` модульные тесты, имитирующие
        компонент репозитория внутри теста (как чаще всего происходит), как правило перестают
        работать.
        - При имитации компонента репозитория или необходимости запуска приложения без
        создания демонстрационных данных мы можем легко и быстро имитировать компонент,
        отвечающий за заполнение данными, закомментировав его аннотацию `@Component`.

        Создайте класс `DataLoader`, такой же, как в блоке кода ниже. Выделение логики создания выборки
        данных, подобной методу `loadData()` класса `DataLoader`, и снабжение ее аннотацией
        `@PostConstruct` возвращает `RestApiDemoController` к его единственной задаче — предоставление
        внешнего `API` и возлагает на DataLoader ответственность за его предполагаемые задачи:
        ```java
        @Component
        class DataLoader {
            private final CoffeeRepository coffeeRepository;

            public DataLoader(CoffeeRepository coffeeRepository) {
                this.coffeeRepository = coffeeRepository;
            }

            @PostConstruct
            private void loadData() {
                coffeeRepository.saveAll(List.of(
                        new Coffee("Café Cereza"),
                        new Coffee("Café Ganador"),
                        new Coffee("Café Lareño"),
                        new Coffee("Café Três Pontas")
                ));
            }
        }
        ```
        И последнее, маленькое изменение булева условия тернарного оператора в методе `putCoffee()`.
        После того, как мы отрефакторили этот метод для использования репозитория не остается
        никакого смысла вычислять сначала отрицательное условие, поэтому удаление оператора
        отрицания (!) из условия повысит читаемость кода. Нам потребуется поменять местами значения
        тернарного оператора для случаев `True` и `False` для сохранения изначального смысла:
        ```java
        @PutMapping("/{id}")
        ResponseEntity&lt;Coffee> putCoffee(@PathVariable String id,
                                         @RequestBody Coffee coffee) {

            return (coffeeRepository.existsById(id))
                ? new ResponseEntity&lt;>(coffeeRepository.save(coffee),
                    HttpStatus.OK)
                : new ResponseEntity&lt;>(coffeeRepository.save(coffee),
                    HttpStatus.CREATED);
        }
        ```


        В итоге за эту тему мы узнали, как добавить доступ к базе данных в приложение Spring Boot, которое мы создавали в
        прошлой теме. А также поговорили про:

        - доступ к базе данных из Java;
        - J`ava Persistence API (JPA)`;
        - базы данных H2;
        - Spring Data JPA;
        - репозиторий `Spring Data`;
        - механизмы создания выборок данных с помощью репозиториев.
    </markdown>
</slide>