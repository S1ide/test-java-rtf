<?xml version='1.0' encoding='UTF-8'?>
<slide xmlns="https://ulearn.me/schema/v2" title="Формирование диалогов с помощью WebSocket" id="a60e3e57-057f-428f-ad89-d2c22d1d3766">
    <markdown>
        Ранняя версия распределенной системы была полностью ориентирована на вытягивание данных (pull-based), то есть пользователь запрашивал данные о местоположении из браузера, который передавал запрос в приложение Aircraft Positions, оно перенаправляло этот запрос приложению PlaneFinder, а обратно ответы передавались по цепочке.

        Ранее мы заменили среднюю часть нашей распределенной системы событийно-управляемой архитектурой. Сейчас PlaneFinder, получая данные о местоположении от радиолокатора, выталкивает их в конвейер потоковой платформы, где их использует приложение Aircraft Positions. В основе километра остается вытягивание, а обновления запрашиваются путем обновления страницы браузера, вручную или автоматически.

        Стандартная семантика «запрос — ответ» работает во множестве сценариев использования, однако отвечающей серверной стороне в них не достает возможности инициировать передачу данных запрашивающей стороне вне зависимости от каких-либо запросов. Есть решений для такого сценария использования, но один из универсальных вариантов это WebSocket.

        #### Что такое WebSocket

        WebSocket — полнодуплексный протокол обмена информацией, связывающий две системы через одно TCP-соединение. После установки соединения WebSocket каждая из участвующих сторон может инициировать передачу данных другой стороне, а специально выделенный сервер приложений может поддерживать многочисленные клиентские соединения, это позволяет создавать системы с низкими накладными расходами для широковещательной передачи и диалогового взаимодействия. Соединения WebSocket сформировано на основе стандартных HTTP-соединений с помощью HTTP-заголовка upgrade, и по завершении процедуры установления связи соединение переключается с протокола HTTP на WebSocket.

        Сейчас WebSocket поддерживают все основные браузеры и языки программирования. По сравнению с HTTPзапросами и ответами у WebSocket накладные расходы очень малы, то есть операции передачи информации не идентифицируются и согласовывют условия обмена информацией при каждой передаче, это сокращает накладные расходы на кадрирование WebSocket до нескольких байтов. А также WebSocket обладает полнодуплексностью, способностью сервера обрабатывать несколько открытых соединений и низкие накладные расходы

    </markdown>
</slide>