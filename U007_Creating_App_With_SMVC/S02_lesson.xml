<?xml version='1.0' encoding='UTF-8'?>
<slide xmlns="https://ulearn.me/schema/v2" title="Взаимодействия конечного пользователя с помощью шаблонизаторов " id="78c02530-4766-4288-92aa-21bdd9a02dcc">
    <markdown>
        Приложения Spring Boot – мощный инструмент, который успешно справляется с решением сложных прикладных задач, обеспечивает возможность взаимодействия с конечными пользователями. Spring Boot все еще поддерживает давно устоявшиеся стандарты, например Java Server Pages (JSP), для старых приложений, большинство современных приложений либо использует более функциональные технологии представлений, поддерживаемые непрерывно развивающимися шаблонизаторами, либо переводит разработку клиентской части на HTML и JavaScript. Вы можете сочетать эти два варианта, используя сильные стороны каждого.

        Spring Boot прекрасно работает с интерфейсами HTML и JavaScript, но об этом позже, а пока рассмотрим подробнее шаблонизаторы.

        Шаблонизаторы позволяют работающему на стороне сервера приложению генерировать конечные страницы для отображения и выполнения в браузере конечного пользователя. Технологии представлений могут различаться подходами, но в общем дают следующие возможности:

        -	язык шаблонов и/или набор тегов, описывающих входные данные шаблонизатора, используемые обработчиком шаблонов для формирования нужных результатов;
        -	распознаватель представлений, определяющий, какое представление/шаблон использовать для воплощения запрашиваемого ресурса.

        Spring Boot поддерживает такие технологии представлений, как Thymeleaf, FreeMarker, Groovy Markup и Mustache. Более широко применяется Thymeleaf, поддерживающий приложения Spring MVC и Spring WebFlux.

        В Thymeleaf используются естественные шаблоны — файлы, включающие элементы кода, которые можно открыть и просмотреть в любом стандартном браузере. Все взаимодействия кода, для которых требуются соответствующие серверные элементы, помечаются как ориентированные на Thymeleaf, а отсутствующие части просто не отображаются.

        С помощью Spring Boot, Spring MVC и Thymeleaf создадим простое веб-приложение, предоставляющее конечному пользователю интерфейс, который позволяет запрашивать у сервиса PlaneFinder текущее местоположение воздушных судов и отображать результаты.

        ### Инициализация проекта

        Для начала обратимся к Spring Initializr, выбрав следующие опции:
        -	проект Maven;
        -	Java;
        -	текущая стабильная версия Spring Boot;
        -	упаковка — JAR;
        -	Java — 11.

        Зависимости:

        -	Spring Web (spring-boot-starter-web);
        -	Spring Reactive Web (spring-boot-starter-webflux);
        -	Thymeleaf (spring-boot-starter-thymeleaf);
        -	Spring Data JPA (spring-boot-starter-data-jpa);
        -	H2 Database (h2);
        -	Lombok (lombok).
    </markdown>
</slide>