<?xml version='1.0' encoding='UTF-8'?>
<slide xmlns="https://ulearn.me/schema/v2" title="Доверяй, но проверяй" id="8c654c1e-c2e2-4470-8cd0-d77d177e9346">
    <markdown>
        Последний шаг — проверить наш `API` в действии. Для этого используем клиент командной строки
        `HTTPie`.

        Для этого запрашиваем у конечной точки `coffees` все виды кофе, которые содержатся в списке.
        `HTTPie` по умолчанию выполняет запрос `GET` и, если не указано иное имя домена, использует
        домен `localhost`, в результате чего, уменьшая объем набираемого текста. Мы видим, что выводятся
        все четыре вида кофе, которые мы внесли в список.

        ![](https://i.imgur.com/0ejXuFy.png "Рис. 4")

        Далее вставляем скопированное поле `id` одного из видов кофе в другой запрос `GET`.

        ![](https://i.imgur.com/JXo6sJK.png "Рис. 5")

        Выполним запрос `POST` с помощью `HTTPie`. Передаем текстовый файл, содержащий JSON-
        представление объекта `Coffee` с полями `id` и `name`. `HTTPie` понимает подразумевающуюся
        операция `POST`.

        ![](https://i.imgur.com/ap6mHSI.png "Рис. 6")

        Выполним запрос `PUT`. Укажем `id` только что добавленного вида кофе и передадим команде еще
        один объект `JSON` с другим названием. В итоге кофе с идентификатором `99999` теперь называется
        `Caribou Coffee`, а не `Kaldi’s Coffee`. Возвращаемый код состояния — `200` (OK).

        Выполним такой же запрос `PUT`, но укажем в `URI` несуществующий `id` кофе. Приложение добавит
        его в соответствии с определенным `IETF` поведением, после чего вернет код состояния `HTTP 201`(Создано).

        ![](https://i.imgur.com/T2BbUln.png "Рис. 7")

        ![](https://i.imgur.com/I698E3p.png "Рис. 8")

        Выполним запрос `DELETE` с помощью `HTTPie`. Укажем `HTTP` команду и полный `URI` ресурса. В
        результате увидим код состояния `HTTP 200` (OK), который указывает, что ресурс был успешно
        удален, без отображения какого-либо значения.

        ![](https://i.imgur.com/Ei8Qfvo.png "Рис. 9")

        Последним шагом заново запросим полный список видов кофе. По итогу в списке теперь есть
        новый вид кофе `Mötor Oil Coffee`.

        Наша проверка `API` прошла успешно.

        ![](https://i.imgur.com/c6fcjRM.png "Рис. 10")

        #### Краткое содержание
        В этой главе мы создали простейшее работоспособное приложение с помощью Spring Boot.

        А именно:

        - Создали и развили удобный REST API, единообразно обеспечивающий функциональность,
        необходимую для создания, чтения, модификации и удаления ресурсов, без которой невозможна
        никакая серьезная система.
        - Рассмотрели аннотацию `@RequestMapping` и все ее удобные специализированные версии,
        соответствующие описанным HTTP командам.
        - Упростили код и обеспечили возврат кодов ответов HTTP там, где это необходимо.
        - Успешно проверили API в действии.
    </markdown>
</slide>