<?xml version="1.0"?>
<slide id="7e3b12e9-4371-4593-ae21-40115ace1a2b" title="Первое преимущество" xmlns="https://ulearn.me/schema/v2">
    <markdown>
        ## Упрощение управления зависимостями с помощью стартовых пакетов:
        Spring Boot позволяет сделать зависимости управляемыми.

        Разработчики ПО часто сталкиваются с проблемами, связанными с управлением
        зависимостями. Любая функциональность приложения всегда требует несколько 
        зависимостей «переднего края». Практически всегда все основные зависимости включают 
        в себя множество других зависимостей для реализации функциональности.

        Даже в относительно простом проекте, в файле сборки требуется немало зависимостей, 
        не говоря о функциональности, которую вы бы хотели включить в свое приложение.

        Совместное использование библиотек требует строгости, ведь одна версия конкретной 
        зависимости может тестироваться лишь с конкретной версией другой зависимости. А 
        возникновение проблем с этим приводит к потраченному впустую времени. Однако,
        **Spring Boot и его стартовые** пакеты помогут нам справиться с этим.

        Стартовые пакеты Spring Boot являются *спецификациями* Bill of Materials/BOM, которые 
        строятся на предположении о том, что практически всегда разработка функциональной 
        возможности происходит одинаково, например: при создании API мы организуем
        конечные точки, доступные для пользователей, обрабатываем запросы, отправляем и 
        получаем данные по сети с помощью конкретного протокола и т. д. Данный паттерн 
        проектирования неизменен и представляет собой общепринятый подход с некоторыми 
        вариациями. Для этого и нужен стартовый пакет Spring Boot. Добавляя стартовый пакет 
        (например, ``spring-boot-starter-web``), мы получаем связанные между собой элементы
        функциональности в одной зависимости приложения. Все зависимости, которые он 
        охватывает синхронизированы по версиям, то есть протестированы на совместную 
        работу. Это помогает сократить список зависимостей и исключить трудно 
        обнаруживаемые конфликты версий среди зависимостей.

        *! Если необходимо включить в приложение функциональность, предоставляемую
        другой версией включенной зависимости, можно переопределить протестированную
        версию.*

        *! Если вам нужно переопределить/исключить используемую по умолчанию версию 
        зависимости — переопределяйте, но тогда повысьте уровень тестирования, чтобы 
        сократить возникающие риски.*
    </markdown>
</slide>