<?xml version="1.0"?>
<slide id="08b91b92-1376-41fc-9acf-24ecf3129904" title="Второе преимущество" xmlns="https://ulearn.me/schema/v2">
    <markdown>
        ## Упрощение развертывания с помощью исполняемых JAR-файлов
        Давайте вспомним, что надо сделать, чтобы запустить в эксплуатацию приложения с
        доступом к базе данных, при условии наличия администраторов, которые бы настроили
        машину/виртуальную машину:

        1. Установить и настроить сервер приложений и драйверы базы данных.
        2. Создать соединение с базой данных и пул соединений.
        3. Собрать и протестировать приложение.
        4. Выполнить развертывание приложения и его зависимостей на сервере приложений.

        Однако, чудесный Spring Boot дает нам возможность сделать все тоже самое, но всего за один шаг. Как это происходит:

        Вместо *шейдинга(1)* JAR-файлов, создаются *вложенные* JAR-файлы с сохранением их
        желаемого и получающегося форматов.

        Это позволяет нам:

        Легко извлекать содержимое исполняемого JAR-файла Spring Boot.
        Запускать приложение везде, где доступна виртуальная машина Java (команда вида ``java -
        jar &lt;SpringBootAppName.jar&gt;``) с помощью выходного JAR-файла, в который упакованы все
        развертываемые зависимости.

        Установив нужное значение одного свойства в файле сборки, вы делаете один-
        единственный JAR1 файл полностью само-исполняемым. А при наличии на машине JVM
        вы можете не описывать в сценарии, а просто набрать команду (заменив имя файла
        своим).

        В итоге: включение всех зависимостей в один JAR-файл Spring Boot, сильно упрощает
        развертывание. А вложение JAR-файлов позволяет устранить огромное количество
        потенциальных проблем (следствие потенциальных конфликтов версий) и юридических
        проблем (следствие переупаковки программного обеспечения и объединения его с
        другим программным обеспечением под другой лицензией).

        *(1)* Шейдинг (shading) -- процесс выделения каждого файла из JAR-файла приложения и всех
        JAR-файлов зависимостей с последующим объединением их в один целевой JAR-файл.
    </markdown>
</slide>