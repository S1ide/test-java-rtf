<?xml version='1.0' encoding='UTF-8'?>
<slide xmlns="https://ulearn.me/schema/v2" title="Регулировка уровня журналирования с помощью Actuator" id="e732ab8a-975e-4075-ab41-9ddcea68a3fe">
    <markdown>
        Выбор уровня журналирования для приложений в продакшене означает определенный
        компромисс. Чем больше результатов журналирования, тем больше операций системного уровня
        и тем больше нужно места для хранения. Кроме того, собираются как относящиеся, так и не
        относящиеся к делу данные. В результате найти причины трудноуловимых проблем становится
        труднее.

        Actuator решает и эту проблему, позволяя задавать общий уровень журналирования (например,
        "INFO") для всех компонентов и временно менять его при возникновении критической проблемы.
        Actuator помогает задавать и переопределять уровни журналирования с помощью запроса `POST` к
        соответствующей конечной точке. Ниже показан уровень журналирования по умолчанию для
        `org.springframework.data.web`.

        Поскольку уровень журналирования для этого компонента не был задан в настройках,
        используется уровень по умолчанию — "INFO".

        Если вы получили оповещение о проблеме с запущенным приложением и хотели бы повысить
        уровень журналирования для конкретного компонента с целью диагностики и решения
        проблемы, то вам достаточно с помощью `POST` отправить новое значение параметра
        `configuredLevel` в формате JSON в конечную точку `/actuator/loggers`:

        ```
        echo '{"configuredLevel": "TRACE"}'
            | http :8080/actuator/loggers/org.springframework.data.web
        ```

        ![](https://i.imgur.com/LKQbs3r.png "Рис. 18")

        Запрос уровня журналирования для `org.springframework.data.web` теперь подтверждает, что он
        установлен в "TRACE" и обеспечит подробную диагностическую информацию о приложении.

        ![](https://i.imgur.com/AnZq67E.png "Рис. 19")

        *"TRACE" может помочь в поиске причин трудноуловимой проблемы, но это довольно
        тяжелый уровень журналирования, фиксирующий даже более подробную информацию,
        чем "DEBUG". В продакшене он может обеспечить необходимую информацию, но не
        следует забывать о нагрузке на приложение.*

        **НЕ ЗАБУДЬТЕ ИЗВЛЕЧЬ КОД ИЗ РЕПОЗИТОРИЯ ПОЛНЫЙ КОД НАХОДИТСЯ В ВЕТКЕ chapter5end.**

        ### Резюме

        Для выяснения, идентификации и изоляции видов поведения, проявляющихся в ходе работы
        приложения нужны удобные утилиты.  Чтобы сделать приложение более динамическим и
        распределенным приходится делать следующее:

        - задавать и менять настройки приложений динамически;
        - определять или подтверждать текущие настройки и их источники;
        - осуществлять контроль и мониторинг среды выполнения приложения и индикаторов его
        состояния;
        - временно корректировать уровни журналирования работающих в текущий момент
        приложений для выявления первопричин различных проблем.

        Мы рассмотрели, как использовать встроенные возможности Spring Boot по заданию настроек, его
        Autoconfiguration Report, а также Spring Boot Actuator для гибкого динамического создания,
        определения и модификации параметров среды приложения.
    </markdown>
</slide>