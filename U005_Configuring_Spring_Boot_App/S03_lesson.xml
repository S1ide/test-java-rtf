<?xml version='1.0' encoding='UTF-8'?>
<slide xmlns="https://ulearn.me/schema/v2" title="@Value" id="2bf01712-8d4d-4ca2-bef4-fae1923301e9">
    <markdown>
        Аннотация `@Value` — один из самых простых подходов для включения параметров конфигурации в
        код. Она построена на основе сопоставления с образцом и языка выражений Spring (Spring
        Expression Language, SpEL), но несмотря на то, что она проста, обладает большими
        возможностями.

        Опишем отдельное свойство в файле `application.properties` (рис. 1).

        ![](https://i.imgur.com/IDGhN8w.png "Рис. 1")

        Для того чтобы посмотреть это свойство в действии, создадим в приложении дополнительный
        класс с аннотацией `@RestController`, с помощью него мы сможем приветствовать пользователей
        приложения и выполнять связанные с этим задачи (рис. 2).

        ![](https://i.imgur.com/BV3BPxK.png "Рис. 2")

        Заметим, что аннотация `@Value` применяется к переменной-члену `name` и принимает один
        параметр `value` типа `String`. Значение определим с помощью SpEL, поместив имя переменной в
        качестве вычисляемого выражения между разделителями `{` и `}`. SpEL также позволяет указывать
        после двоеточия значение по умолчанию (в данном примере `Mirage`) в случаях, когда переменная
        не описана в объекте `Environment` приложения.

        При запуске приложения и выполнении запроса к конечной точке `/greeting` оно отвечает: `Dakota`,
        как и было задумано.

        ![](https://i.imgur.com/OmP56M9.png "Рис. 3")

        Закомментируем следующую строку в файле `application.properties` с помощью `#`, чтобы убедиться,
        что значение по умолчанию работает и перезапустим приложение:
        ```
        #greeting-name=Dakota
        ```
        Теперь при запросе к конечной точке `/greeting` мы получаем данный ответ. Поскольку `greeting-
        name` больше не описано в каких-либо источниках для `Environment` приложения, вступает в
        действие значение по умолчанию `Mirage`.

        ![](https://i.imgur.com/HF6StUY.png "Рис. 4")

        А еще с помощью `@Value` значение одного свойства можно получить из значения другого или
        создать на его основе.
        Нам понадобятся два свойства, чтобы показать, как работают вложенные свойства. Для этого
        создадим второе свойство `greeting-coffee` в файле `application.properties`.

        ![](https://i.imgur.com/NlZQqmk.png "Рис. 5")

        Добавим код в класс `GreetingController` для «кофеизированного» приветствия и конечной точки,
        сделав запрос к которой мы увидим результат. Также укажем значение по умолчанию для `coffee`.

        ![](https://i.imgur.com/zZezRqK.png "Рис. 6")

        Перезапустим приложение и выполним запрос к новой конечной точке `/greeting/coffee` и увидим,
        что все работает так, как мы задумали. Поскольку оба наших свойства описаны в файле
        `application.properties`, отображаемые значения соответствуют их описаниям.

        ![](https://i.imgur.com/bRabQhQ.png "Рис. 7")

        Однако и у `@Value` есть ограничения.

        Так как мы задали значение по умолчанию для свойства `greeting-coffee`, то можем
        закомментировать его описание в файле `application.properties`, при этом аннотация `@Value` все
        равно корректно обработает значение по умолчанию свойства `greeting-coffee` с помощью
        переменной экземпляра `coffee` в классе `GreetingController`. Тем не менее, если закомментировать
        описание как `greeting-name`, так и `greeting-coffee` в файле свойств, окажется, что ни в одном
        источнике `Environment` они фактически не описаны. Из-за этого при попытке приложения
        инициализировать компонент `GreetingController` с помощью ссылки на не описанное здесь
        свойство `greeting-name` внутри `greeting-coffee` будет выдана следующая ошибка:

        ```
        org.springframework.beans.factory.BeanCreationException:
            Error creating bean with name 'greetingController':
                Injection of autowired dependencies failed; nested exception is
                java.lang.IllegalArgumentException:
                    Could not resolve placeholder 'greeting-name' in value
                    "greeting-coffee: ${greeting-name} is drinking Cafe Ganador"
        ```

        Второе ограничение, относящееся к описанным в файле `application.properties` свойствам,
        используемым исключительно посредством `@Value`:

        IDE не понимает, что они используются приложением, так как код на них ссылается только внутри
        ограниченных кавычками строковых переменных, а поэтому никакой прямой привязки к коду нет.
        Да, мы можем визуально проверить правильность написания названий и применения свойств, но
        делать это придется вручную, а вероятность ошибок возрастет.

        Поэтому гораздо лучший обходной вариант — типобезопасный механизм с возможностью
        проверки с помощью соответствующей утилиты.
    </markdown>
</slide>