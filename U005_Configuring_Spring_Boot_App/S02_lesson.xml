<?xml version='1.0' encoding='UTF-8'?>
<slide xmlns="https://ulearn.me/schema/v2" title="Конфигурация приложения" id="8e3a9500-4b93-43be-878f-787481c1ea99">
    <markdown>
        *Ни одно из приложений не является изолированным.*

        Обычно в этой фразе подразумевается очевидное: во многих случаях приложение не может
        выполнять свои функции, не взаимодействуя с другими приложениями/сервисами. Но также ее
        можно понять по-другому: ни одно приложение не могло бы приносить пользу, не имея доступа к
        своей среде в той или иной форме. Ведь статическое приложение без возможностей настройки
        оказалось бы негибким и неуклюжим.

        Множество механизмов, служащих для динамического задания и изменения настроек
        приложений, даже прямо во время их работы, содержатся в приложениях Spring Boot. Они
        используют интерфейс Environment фреймворка Spring для управления параметрами
        конфигурации, получаемыми из всех источников, включая следующие:

        - Глобальные настройки утилит разработчика Spring Boot (devtools) в каталоге
        `$HOME/.config/spring-boot`, при запущенных devtools.
        - Аннотации `@TestPropertySource` для тестов.
        - Атрибут `properties` для тестов, доступный в `@SpringBootTest` различных тестовых
        аннотаций для проверки различных срезов приложений.
        - Аргументы командной строки.
        - Свойства из `SPRING_APPLICATION_JSON` (JSON, встраиваемый в переменную среды или
        системное свойство). (Приведенные источники свойств перечислены в порядке убывания
        приоритета: свойства из источников, расположенных выше в списке, превалируют над
        аналогичными свойствами из источников, расположенных ниже (Порядок старшинства
        PropertySources Spring Boot)).
        - Параметры инициализации `ServletConfig`.
        - Параметры инициализации `ServletContext`.
        - Атрибуты `JNDI` из `java:comp/env`.
        - Системные свойства Java (`System.getProperties()`).
        - Переменные среды операционной системы.
        - Класс `RandomValuePropertySource`, возвращающий случайные значения для свойств,
        начинающихся с `random`.*.
        - Связанные с конкретным профилем свойства приложения, расположенные вне
        упакованного JAR-файла (варианты `application-{profile}.properties` и YAML).
        - Связанные с конкретным профилем свойства приложения, упакованные внутрь JAR-файла
        (варианты `application-{profile}.properties` и YAML).
        - Свойства приложения, расположенные вне упакованного JAR-файла (варианты
        `application.properties` и YAML).
        - Свойства приложения, упакованные внутрь JAR-файла (варианты `application.properties` и
        YAML).
        - Аннотации `@PropertySource` для классов `@Configuration`. Обратите внимание на то, что
        подобные источники свойств не добавляются в Environment до обновления контекста
        приложения, что слишком поздно для настройки некоторых свойств, читаемых до начала
        обновления, например `logging.`* и `spring.main.`*.
        - Свойства по умолчанию, задаваемые с помощью `SpringApplication.setDefaultProperties`.

        Но сегодня для сценариев кода мы будем использовать эти источники:

        - аргументы командной строки;
        - переменные среды операционной системы;
        - свойства приложения, упакованные внутрь JAR-файла (варианты `application.properties` и
        YAML).

        Начнем со свойств, описываемых в файле `application.properties` приложения, и поэтапно будем
        подниматься по иерархии.
    </markdown>
</slide>